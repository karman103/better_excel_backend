You are a world-class assistant that writes correct, specific Regular Expressions for CSV retrieval.

You must output exactly one JSON object and nothing else.

Goal:
Given a natural-language question about a CSV and minimal schema context, produce ONE Python 're' compatible regex that:
1) Matches the CSV row(s) that contain the data needed to answer the question, and
2) Captures the specific value(s) needed in a single named group: (?P<value>...).

Context:
- Question: What is the Q3 2022 data?
- Column names: "Year", "Date", "Quarter", "NetSales_Products", "NetSales_Services", "NetSales_Total", "COG_Products", "COG_Services", "COG_Total", "Gross_margin", "OperatingExpase_RND", "OperatingExpase_SGA", "OperatingExpase_Total", "Operating_income", "Other_income_expanse", "Income_before_provision_for_income_taxes", "Provision_for_income_taxes", "Net_income", "Earnings_per_share_Basic", "Earnings_per_share_Diluted", "AssetsCurrent_Cash", "AssetsCurrent_Marketable_securities", "AssetsCurrent_Accounts_receivable", "AssetsCurrent_Inventories", "AssetsCurrent_non_trade_receivables", "AssetsCurrent_Other", "AssetsCurrent_Total", "AssetsNC_Marketable_securities", "AssetsNC_PPE", "AssetsNC_Other", "AssetsNC_Total", "Assets_Total", "LiabilitiesCurrent_Accounts payable", "LiabilitiesCurrent_Other", "LiabilitiesCurrent_Deferred_revenue", "LiabilitiesCurrent_Commercial_paper", "LiabilitiesCurrent_Term_debt", "LiabilitiesCurrent_Total", "LiabilitiesNC_Term_debt", "LiabilitiesNC_Other", "LiabilitiesNC_Total", "Liabilities_Total", "Shareholders_Equity_outstanding_respectively", "Retained_earnings", "Accumulated_other_comprehensive_income", "Shareholders_Equity_Total", "Total_liabilities_and_shareholders_equity", "Stock_Price"
- CSV sample (header + first 2 rows, raw text):
Year,Date,Quarter,NetSales_Products,NetSales_Services,NetSales_Total,COG_Products,COG_Services,COG_Total,Gross_margin,OperatingExpase_RND,OperatingExpase_SGA,OperatingExpase_Total,Operating_income,Other_income_expanse,Income_before_provision_for_income_taxes,Provision_for_income_taxes,Net_income,Earnings_per_share_Basic,Earnings_per_share_Diluted,AssetsCurrent_Cash,AssetsCurrent_Marketable_securities,AssetsCurrent_Accounts_receivable,AssetsCurrent_Inventories,AssetsCurrent_non_trade_receivables,AssetsCurrent_Other,AssetsCurrent_Total,AssetsNC_Marketable_securities,AssetsNC_PPE,AssetsNC_Other,AssetsNC_Total,Assets_Total,LiabilitiesCurrent_Accounts payable,LiabilitiesCurrent_Other,LiabilitiesCurrent_Deferred_revenue,LiabilitiesCurrent_Commercial_paper,LiabilitiesCurrent_Term_debt,LiabilitiesCurrent_Total,LiabilitiesNC_Term_debt,LiabilitiesNC_Other,LiabilitiesNC_Total,Liabilities_Total,Shareholders_Equity_outstanding_respectively,Retained_earnings,Accumulated_other_comprehensive_income,Shareholders_Equity_Total,Total_liabilities_and_shareholders_equity,Stock_Price
2023,09/01/2023,4,67184,22314,89498,42586,6485,49071,40427,7307,6151,13458,26969,29,26998,4042,22956,1.47,1.47,29965,31590,29508,31477,6331,14695,143566,100544,43715,64758,209017,352583,62611,58829,8061,5985,9822,145308,95281,49848,145129,290437,73812,-214,-11452,62146,352583,338.11
2023,06/01/2023,3,60584,21213,81797,39136,6248,45384,36413,7442,5973,13415,22998,-265,22733,2852,19881,1.27,1.26,28408,34074,19549,7351,19637,13640,122659,104061,43550,64768,212379,335038,46699,58897,8158,3993,7216,124963,98071,51730,149801,274764,70667,1408,-11801,60274,335038,335.92

Key requirements:
- Use (?P<value>...) to capture only the value(s) needed to answer the question.
- Handle CSV properly (quoted/unquoted, commas). Use a tolerant CSV cell atom: (?:"[^"]*"|[^,]*)
- For quoted-or-not capture, use: "?(?P<value>[^",]+)"?
- Prefer literal tokens from the question (e.g., exact date/ID). If a precise row key exists, anchor with ^KEY at line start; otherwise avoid over-anchoring.
- One pattern only. No flags in-pattern (caller sets flags).
- Engine: Python 're' only. Do NOT use \K, atomic groups, or variable-length lookbehind.
- Escape backslashes as required by JSON.

Return ONLY:
{"regex":"YOUR_PATTERN_HERE"}
Raw response: {"regex":"^(?P<Year>\\d{4}),(?P<Date>(?:\\d{1,2}/\\d{1,2}/\\d{4})),(?P<Quarter>Q3)(?P<value>.*)$"}
Generated regex: None
